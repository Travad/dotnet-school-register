// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolRegister.Api.Data.Contexts;

#nullable disable

namespace SchoolRegister.Api.Migrations
{
    [DbContext(typeof(SchoolRegisterDbContext))]
    [Migration("20221229102824_IntialModelCompleted")]
    partial class IntialModelCompleted
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("SchoolRegister.Models.Entities.Attendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDay")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("520dccb3-2a51-4022-a85a-215a5ba5fc4c"),
                            EndDay = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDay = new DateTime(2020, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = new Guid("632dadd2-5fbd-4149-943c-776700697c2a"),
                            Type = 1
                        });
                });

            modelBuilder.Entity("SchoolRegister.Models.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5bad43d-b512-4d9e-a204-7b91ec9539ed"),
                            Description = "Web Development course is a course that teaches the basics of web development.",
                            EndDate = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Web Development",
                            SchoolId = new Guid("b198a1ec-b23f-49cc-91f5-4d2a4052331c"),
                            StartDate = new DateTime(2020, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b262e289-ef17-460d-99fb-5b7712469da1"),
                            Description = "Mobile Development course is a course that teaches the basics of mobile development.",
                            EndDate = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mobile Development",
                            SchoolId = new Guid("b198a1ec-b23f-49cc-91f5-4d2a4052331c"),
                            StartDate = new DateTime(2020, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SchoolRegister.Models.Entities.CourseAttendee", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AttendeeId")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId", "AttendeeId");

                    b.HasIndex("AttendeeId");

                    b.ToTable("CourseAttendees");

                    b.HasData(
                        new
                        {
                            CourseId = new Guid("b5bad43d-b512-4d9e-a204-7b91ec9539ed"),
                            AttendeeId = new Guid("520dccb3-2a51-4022-a85a-215a5ba5fc4c")
                        },
                        new
                        {
                            CourseId = new Guid("b262e289-ef17-460d-99fb-5b7712469da1"),
                            AttendeeId = new Guid("520dccb3-2a51-4022-a85a-215a5ba5fc4c")
                        });
                });

            modelBuilder.Entity("SchoolRegister.Models.Entities.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AttendeeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<double>("GradeMark")
                        .HasColumnType("REAL");

                    b.Property<int>("GradeType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RegistrationTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId", "AttendeeId");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4835492c-fc96-40f1-83a2-6281427a0349"),
                            AttendeeId = new Guid("520dccb3-2a51-4022-a85a-215a5ba5fc4c"),
                            CourseId = new Guid("b5bad43d-b512-4d9e-a204-7b91ec9539ed"),
                            GradeMark = 8.9000000000000004,
                            GradeType = 0,
                            RegistrationTime = new DateTime(2020, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SchoolRegister.Models.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address3")
                        .HasColumnType("TEXT");

                    b.Property<string>("Canton")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cap")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(52)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("TEXT");

                    b.Property<string>("Province")
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LocationSchools");

                    b.HasData(
                        new
                        {
                            Id = new Guid("745801d7-4678-473c-987d-8cbadfa3bfcb"),
                            Address1 = "Via Camolo, 13A",
                            Cap = "10867",
                            City = "Isernia",
                            Country = "Italy",
                            Province = "Campobasso",
                            Region = "Molise"
                        },
                        new
                        {
                            Id = new Guid("6a2fe967-daee-4a20-95ea-70f339dfc17c"),
                            Address1 = "Via Proviola, 2A",
                            Cap = "10867",
                            City = "Isernia",
                            Country = "Italy",
                            Province = "Campobasso",
                            Region = "Molise"
                        });
                });

            modelBuilder.Entity("SchoolRegister.Models.Entities.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfConstruction")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LocationSchoolId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocationSchoolId");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b198a1ec-b23f-49cc-91f5-4d2a4052331c"),
                            DateOfConstruction = new DateTime(1985, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "I.T.T. Marconi is a high-tech school with the purpose of providing high-quality IT-oriented education to the students of the province of Trento.",
                            Email = "info@ittmarconi.it",
                            LocationSchoolId = new Guid("745801d7-4678-473c-987d-8cbadfa3bfcb"),
                            Name = "I.T.T. Marconi",
                            PhoneNumber = "+390474560781"
                        });
                });

            modelBuilder.Entity("SchoolRegister.Models.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BirthPlaceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BirthPlaceId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("632dadd2-5fbd-4149-943c-776700697c2a"),
                            BirthDate = new DateTime(2002, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlaceId = new Guid("6a2fe967-daee-4a20-95ea-70f339dfc17c"),
                            Email = "john.doe@gmail.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "+41123456789"
                        });
                });

            modelBuilder.Entity("SchoolRegister.Models.Entities.Attendee", b =>
                {
                    b.HasOne("SchoolRegister.Models.Entities.Student", "Student")
                        .WithMany("Attendees")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolRegister.Models.Entities.Course", b =>
                {
                    b.HasOne("SchoolRegister.Models.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolRegister.Models.Entities.CourseAttendee", b =>
                {
                    b.HasOne("SchoolRegister.Models.Entities.Attendee", "Attendee")
                        .WithMany("CourseAttendees")
                        .HasForeignKey("AttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolRegister.Models.Entities.Course", "Course")
                        .WithMany("CourseAttendees")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendee");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("SchoolRegister.Models.Entities.Grade", b =>
                {
                    b.HasOne("SchoolRegister.Models.Entities.CourseAttendee", "CourseAttendee")
                        .WithMany("Grades")
                        .HasForeignKey("CourseId", "AttendeeId");

                    b.Navigation("CourseAttendee");
                });

            modelBuilder.Entity("SchoolRegister.Models.Entities.School", b =>
                {
                    b.HasOne("SchoolRegister.Models.Entities.Location", "LocationSchool")
                        .WithMany()
                        .HasForeignKey("LocationSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocationSchool");
                });

            modelBuilder.Entity("SchoolRegister.Models.Entities.Student", b =>
                {
                    b.HasOne("SchoolRegister.Models.Entities.Location", "BirthPlace")
                        .WithMany()
                        .HasForeignKey("BirthPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BirthPlace");
                });

            modelBuilder.Entity("SchoolRegister.Models.Entities.Attendee", b =>
                {
                    b.Navigation("CourseAttendees");
                });

            modelBuilder.Entity("SchoolRegister.Models.Entities.Course", b =>
                {
                    b.Navigation("CourseAttendees");
                });

            modelBuilder.Entity("SchoolRegister.Models.Entities.CourseAttendee", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("SchoolRegister.Models.Entities.Student", b =>
                {
                    b.Navigation("Attendees");
                });
#pragma warning restore 612, 618
        }
    }
}
